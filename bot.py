import os
import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [["üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "üßò‚Äç‚ôÄÔ∏è –†–∞—Å—Ç—è–∂–∫–∞"], ["üìä –ò–∑–º–µ—Ä–µ–Ω–∏—è", "üìà –û—Ç—á—ë—Ç—ã"]]

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    SELECT_TRAINING_FOLDER, CREATE_TRAINING_FOLDER,
    SELECT_EXERCISE, CREATE_EXERCISE,
    RECORD_WEIGHT, RECORD_MEASUREMENTS,
    SELECT_MEASUREMENT_TYPE,
) = range(7)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id

    if chat_id not in user_data:
        user_data[chat_id] = {
            "folders": {},
            "measurements": [],
            "stretching": [],
        }
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç üí™",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True),
        )
    else:
        await update.message.reply_text(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True),
        )

# --- –¢–†–ï–ù–ò–†–û–í–ö–ê ---
async def training_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    folders = user_data[chat_id]["folders"]

    if not folders:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:")
        return CREATE_TRAINING_FOLDER

    folder_list = "\n".join(f"- {name}" for name in folders)
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:\n{folder_list}")
    return CREATE_TRAINING_FOLDER

async def create_training_folder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    folder_name = update.message.text.strip()
    folders = user_data[chat_id]["folders"]

    if folder_name not in folders:
        folders[folder_name] = {}
        await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")

    exercises = folders[folder_name]
    if not exercises:
        await update.message.reply_text("–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        context.user_data["current_folder"] = folder_name
        return CREATE_EXERCISE

    return SELECT_EXERCISE

async def create_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    folder = context.user_data["current_folder"]
    exercise = update.message.text.strip()

    user_data[chat_id]["folders"][folder][exercise] = {
        "sets": 0,
        "reps": 0,
        "records": []
    }

    await update.message.reply_text(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{exercise}' –¥–æ–±–∞–≤–ª–µ–Ω–æ. –°–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏ –ø–æ–¥—Ö–æ–¥–æ–≤? (–ù–∞–ø—Ä: 10x3)")
    context.user_data["current_exercise"] = exercise
    return RECORD_WEIGHT

async def record_sets_reps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    input_text = update.message.text.strip().lower()
    folder = context.user_data["current_folder"]
    exercise = context.user_data["current_exercise"]

    try:
        reps, sets = map(int, input_text.split("x"))
        user_data[chat_id]["folders"][folder][exercise]["reps"] = reps
        user_data[chat_id]["folders"][folder][exercise]["sets"] = sets
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∫–≥ –≤—ã –ø–æ–¥–Ω–∏–º–∞–ª–∏? –ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–æ –ø–æ–¥—Ö–æ–¥–∞–º (–Ω–∞–ø—Ä: 50,50,52)")
        return RECORD_WEIGHT
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 10x3")
        return RECORD_WEIGHT

async def record_weights(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    weights = update.message.text.strip().split(",")
    folder = context.user_data["current_folder"]
    exercise = context.user_data["current_exercise"]
    now = datetime.datetime.now().strftime("%Y-%m-%d")

    user_data[chat_id]["folders"][folder][exercise]["records"].append({
        "date": now,
        "weights": weights
    })

    await update.message.reply_text("–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    return ConversationHandler.END

# --- –†–ê–°–¢–Ø–ñ–ö–ê ---
async def stretching_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    stretching = user_data[chat_id]["stretching"]

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Ä–∞—Å—Ç—è–∂–∫—É:")
    return CREATE_EXERCISE

# --- –ò–ó–ú–ï–†–ï–ù–ò–Ø ---
async def measurement_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å, –æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏, —Ç–∞–ª–∏–∏, –±—ë–¥–µ—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä: 80 100 90 100)")
    return RECORD_MEASUREMENTS

async def record_measurements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    now = datetime.datetime.now().strftime("%Y-%m-%d")
    try:
        weight, chest, waist, hips = map(float, update.message.text.strip().split())
        user_data[chat_id]["measurements"].append({
            "date": now,
            "weight": weight,
            "chest": chest,
            "waist": waist,
            "hips": hips,
        })
        await update.message.reply_text("–ò–∑–º–µ—Ä–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 80 100 90 100")
    return ConversationHandler.END

# --- –û–¢–ß–Å–¢–´ ---
async def reports_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∫–∞ –æ—Ç—á—ë—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –≤–µ—Å–∞–º. (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    return ConversationHandler.END

# --- –û–¢–ú–ï–ù–ê ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# --- –ó–ê–ü–£–°–ö ---
if __name__ == '__main__':
    token = os.getenv("7598042604:AAFGcoTCYnTtnNyXI3Kt_-KFaPsMzokAEqY")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"), training_menu)],
        states={
            CREATE_TRAINING_FOLDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_training_folder)],
            CREATE_EXERCISE: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_exercise)],
            RECORD_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, record_sets_reps)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–†–∞—Å—Ç—è–∂–∫–∞"), stretching_menu)],
        states={CREATE_EXERCISE: [MessageHandler(filters.TEXT & ~filters.COMMAND, cancel)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–ò–∑–º–µ—Ä–µ–Ω–∏—è"), measurement_menu)],
        states={RECORD_MEASUREMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, record_measurements)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–û—Ç—á—ë—Ç—ã"), reports_menu)],
        states={},
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    app.run_polling()